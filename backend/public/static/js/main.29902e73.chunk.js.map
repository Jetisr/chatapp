{"version":3,"sources":["graphql/fragments.ts","graphql/queries.ts","graphql/mutations.ts","components/Layout.tsx","contexts/ModalContext.tsx","components/Message.tsx","components/Modal.tsx","components/PrivateRoute.tsx","graphql/subscriptions.ts","pages/ChatRoom.tsx","hooks/useSnackbar.tsx","pages/UserAuth.tsx","pages/index.tsx","App.tsx","client.ts","index.tsx"],"names":["MessageListMessageFragment","gql","ME","ALL_MESSAGES","MESSAGE","IS_LOGGED_IN","LOGIN","CREATE_ACCOUNT","SEND_MESSAGE","DELETE_MESSAGE","DELETE_MESSAGE_FROM_CACHE","EDIT_MESSAGE","LOGOUT","EDIT_MESSAGE_IN_CACHE","useStyles","makeStyles","createStyles","title","flexGrow","Layout","children","client","useApolloClient","useQuery","data","loading","classes","useState","menuOpen","setMenuOpen","anchorElement","useRef","useMutation","logout","handleMenuClose","handleLogout","a","resetStore","AppBar","position","Toolbar","Typography","variant","className","isLoggedIn","IconButton","color","onClick","AccountCircleOutlined","ref","Menu","anchorEl","current","getContentAnchorEl","anchorOrigin","vertical","horizontal","transformOrigin","keepMounted","open","onClose","MenuItem","Container","maxWidth","initialState","type","description","onConfirm","onCancel","ModalContext","React","createContext","modalState","setModalState","ModalProvider","Provider","value","useModal","awaitingConfirmRef","useContext","closeModal","currentState","confirm","options","reject","resolve","Promise","form","handleConfirm","formValue","Message","message","isOwner","variables","messageId","id","deleteMessageFromServer","deleteMessageFromCache","editMessageMutation","deleteMessage","deleteMessageResult","success","ListItem","ListItemAvatar","Avatar","user","username","toUpperCase","ListItemText","primary","secondary","messageText","ListItemSecondaryAction","edge","aria-label","initialValue","updatedText","EditOutlined","DeleteOutline","Divider","Modal","setFormValue","useEffect","Dialog","DialogTitle","DialogContent","DialogContentText","TextField","autoFocus","fullWidth","onChange","target","onKeyPress","key","DialogActions","Button","PrivateRoute","rest","location","useLocation","LinearProgress","to","pathname","state","from","SUBSCRIBE_TO_NEW_MESSAGES","SUBSCRIBE_TO_DELETIONS","SUBSCRIBE_TO_EDITS","theme","root","maxHeight","overflowY","newMessageField","width","newMessageContainer","bottom","ChatRoom","currentUser","messageEnd","setMessage","sendMessage","sendingMessage","editMessageInCache","useSubscription","onSubscriptionData","subscriptionData","allMessages","readQuery","query","writeQuery","messageAdded","messageDeleted","messageEdited","text","useLayoutEffect","scrollIntoView","Paper","List","map","m","me","label","onKeyDown","InputProps","endAdornment","InputAdornment","disabled","SendOutlined","useSnackbar","setOpen","openSnackbar","textToDisplay","snackbarProps","event","reason","ContentProps","display","flexDirection","card","padding","spacing","marginBottom","textAlign","textField","buttons","justifyContent","Welcome","Box","alignItems","ButtonGroup","size","component","Link","CreateAccountForm","history","useHistory","createAccountFunc","creatingAccount","loginFunc","loggingIn","email","setEmail","firstName","setFirstName","lastName","setLastName","setUsername","password","setPassword","showPassword","setShowPassword","handleAccountCreation","preventDefault","createAccountResult","createUser","login","loginResult","__typename","token","localStorage","setItem","writeData","push","onSubmit","autoComplete","required","onMouseDown","VisibilityOffOutlined","VisibilityOutlined","Snackbar","autoHideDuration","LoginForm","setLogin","handleLogin","result","placeholder","UserAuth","height","Card","exact","path","Pages","App","CssBaseline","typeDefs","resolvers","Mutation","saveLogin","cache","args","removeItem","messages","messagesWithoutDeletedMessage","filter","messageToEdit","InMemoryCache","cacheRedirects","Query","getCacheKey","uploadLink","createUploadLink","uri","wsLink","WebSocketLink","timeout","reconnect","errorHandler","onError","graphQLErrors","networkError","forEach","locations","console","log","authLink","setContext","operation","headers","getItem","authorization","link","ApolloLink","concat","split","definition","getMainDefinition","kind","ApolloClient","render","createMuiTheme","ThemeProvider","document","getElementById"],"mappings":"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","file":"static/js/main.29902e73.chunk.js","sourcesContent":["import gql from \"graphql-tag\";\n\nexport const MessageListMessageFragment = gql`\n  fragment MessageListMessage on Message {\n    id\n    messageText\n    user {\n      id\n      username\n      email\n      firstName\n      lastName\n    }\n  }\n`;\n","import gql from \"graphql-tag\";\nimport { MessageListMessageFragment } from \"./fragments\";\n\nexport const ME = gql`\n  query me {\n    me {\n      email\n      firstName\n      id\n      lastName\n      username\n      messages {\n        id\n        user {\n          id\n        }\n      }\n    }\n  }\n`;\n\nexport const ALL_MESSAGES = gql`\n  query allMessages {\n    allMessages {\n      ...MessageListMessage\n    }\n  }\n\n  ${MessageListMessageFragment}\n`;\n\nexport const MESSAGE = gql`\n  query message($messageId: ID!) {\n    message(messageId: $messageId) {\n      id\n      messageText\n      user {\n        firstName\n        lastName\n        username\n        email\n        id\n      }\n    }\n  }\n`;\n\nexport const IS_LOGGED_IN = gql`\n  query isLoggedIn {\n    isLoggedIn @client\n  }\n`;\n","import gql from \"graphql-tag\";\n\nexport const LOGIN = gql`\n  mutation login($login: String!, $password: String!) {\n    login(login: $login, password: $password) {\n      message\n      success\n      ... on LoginResult {\n        token\n      }\n    }\n  }\n`;\n\nexport const CREATE_ACCOUNT = gql`\n  mutation createAccount(\n    $username: String!\n    $email: String!\n    $password: String!\n    $firstName: String\n    $lastName: String\n  ) {\n    createUser(\n      userName: $username\n      password: $password\n      email: $email\n      firstName: $firstName\n      lastName: $lastName\n    ) {\n      success\n      message\n      ... on CreateUserResult {\n        user {\n          email\n          firstName\n          id\n          lastName\n          messages {\n            id\n            user {\n              id\n            }\n          }\n          username\n        }\n      }\n    }\n  }\n`;\n\nexport const SEND_MESSAGE = gql`\n  mutation sendMessage($messageText: String!) {\n    sendMessage(messageText: $messageText) {\n      success\n      message\n    }\n  }\n`;\n\nexport const DELETE_MESSAGE = gql`\n  mutation deleteMessage($messageId: ID!) {\n    deleteMessage(messageId: $messageId) {\n      success\n      message\n    }\n  }\n`;\n\nexport const DELETE_MESSAGE_FROM_CACHE = gql`\n  mutation deletedMessageFromCache($id: ID!) {\n    deleteMessageFromCache(id: $id) @client\n  }\n`;\n\nexport const EDIT_MESSAGE = gql`\n  mutation editMessage($messageId: ID!, $updatedText: String!) {\n    editMessage(messageId: $messageId, updatedText: $updatedText) {\n      message\n      success\n      ... on EditMessageResult {\n        editedMessage {\n          id\n          messageText\n        }\n      }\n    }\n  }\n`;\n\nexport const ADD_AVATAR = gql`\n  mutation addAvatar($avatar: Upload!) {\n    addAvatar(avatar: $avatar) {\n      success\n    }\n  }\n`;\n\nexport const LOGOUT = gql`\n  mutation logout {\n    logout @client\n  }\n`;\n\nexport const EDIT_MESSAGE_IN_CACHE = gql`\n  mutation editMessageInCache($id: ID!, $text: String!) {\n    editMessageInCache(id: $id, text: $text) @client\n  }\n`;\n","import { useQuery, useApolloClient, useMutation } from \"@apollo/react-hooks\";\nimport {\n  AppBar,\n  Container,\n  createStyles,\n  IconButton,\n  makeStyles,\n  Menu,\n  MenuItem,\n  Toolbar,\n  Typography\n} from \"@material-ui/core\";\nimport { AccountCircleOutlined } from \"@material-ui/icons\";\nimport React, { useState, useRef } from \"react\";\nimport { IsLoggedInQuery, LogoutMutation } from \"../typescript/codegen\";\nimport { IS_LOGGED_IN } from \"../graphql/queries\";\nimport { LOGOUT } from \"../graphql/mutations\";\n\nconst useStyles = makeStyles(() =>\n  createStyles({\n    title: {\n      flexGrow: 1\n    }\n  })\n);\n\nconst Layout: React.FC = ({ children }) => {\n  const client = useApolloClient();\n  const { data, loading } = useQuery<IsLoggedInQuery>(IS_LOGGED_IN);\n  const classes = useStyles();\n  const [menuOpen, setMenuOpen] = useState(false);\n  const anchorElement = useRef<SVGSVGElement | null>(null);\n  const [logout] = useMutation<LogoutMutation>(LOGOUT);\n\n  const handleMenuClose = () => {\n    setMenuOpen(false);\n  };\n\n  const handleMenuOpen = () => {\n    setMenuOpen(true);\n  };\n\n  const handleLogout = async () => {\n    handleMenuClose();\n    await logout();\n    client.resetStore();\n  };\n\n  return (\n    <>\n      <AppBar position=\"sticky\">\n        <Toolbar>\n          <Typography variant=\"h6\" className={classes.title}>\n            Chat App\n          </Typography>\n          {!loading && data && data.isLoggedIn && (\n            <>\n              <IconButton color=\"inherit\" onClick={handleMenuOpen}>\n                <AccountCircleOutlined ref={anchorElement} />\n              </IconButton>\n              <Menu\n                anchorEl={anchorElement.current}\n                getContentAnchorEl={null}\n                anchorOrigin={{ vertical: \"bottom\", horizontal: \"center\" }}\n                transformOrigin={{ vertical: \"top\", horizontal: \"center\" }}\n                keepMounted\n                open={menuOpen}\n                onClose={handleMenuClose}\n              >\n                <MenuItem onClick={handleLogout}>Logout</MenuItem>\n              </Menu>\n            </>\n          )}\n        </Toolbar>\n      </AppBar>\n      <Container maxWidth=\"sm\">{children}</Container>\n    </>\n  );\n};\n\nexport default Layout;\n","import React, { useState, useContext, useRef } from \"react\";\n\ninterface ModalState {\n  title: string;\n  open: boolean;\n  onCancel: () => void;\n}\n\ninterface ConfirmModal extends ModalState {\n  type: \"CONFIRM\";\n  description: string;\n  onConfirm: () => void;\n}\n\ninterface FormModal extends ModalState {\n  type: \"FORM\";\n  initialValue: string;\n  onConfirm: (finalInputValue: string) => void;\n}\n\ntype ModalTypes = FormModal | ConfirmModal;\n\nconst initialState: ConfirmModal = {\n  type: \"CONFIRM\",\n  description: \"\",\n  open: false,\n  title: \"\",\n  onConfirm: () => {},\n  onCancel: () => {}\n};\n\nconst ModalContext = React.createContext<{\n  modalState: ModalTypes;\n  setModalState: React.Dispatch<React.SetStateAction<ModalTypes>>;\n}>({\n  modalState: initialState,\n  setModalState: () => {}\n});\n\nconst ModalProvider: React.FunctionComponent = ({ children }) => {\n  const [modalState, setModalState] = useState<ModalTypes>(initialState);\n  return (\n    <ModalContext.Provider value={{ modalState, setModalState }}>\n      {children}\n    </ModalContext.Provider>\n  );\n};\n\nconst useModal = () => {\n  const awaitingConfirmRef = useRef<{\n    resolve: () => void;\n    reject: () => void;\n  }>();\n  const { modalState, setModalState } = useContext(ModalContext);\n\n  const closeModal = () => {\n    setModalState(currentState => ({ ...currentState, open: false }));\n  };\n\n  const confirm = async (\n    options: Omit<ConfirmModal, \"open\" | \"type\" | \"onCancel\" | \"onConfirm\">\n  ) => {\n    const onCancel = () => {\n      if (awaitingConfirmRef.current) {\n        awaitingConfirmRef.current.reject();\n      }\n    };\n    const onConfirm = () => {\n      if (awaitingConfirmRef.current) {\n        awaitingConfirmRef.current.resolve();\n      }\n    };\n    setModalState({\n      ...options,\n      open: true,\n      type: \"CONFIRM\",\n      onCancel,\n      onConfirm\n    });\n    try {\n      await new Promise((resolve, reject) => {\n        awaitingConfirmRef.current = { resolve, reject };\n      });\n      closeModal();\n      return true;\n    } catch {\n      closeModal();\n      return false;\n    }\n  };\n\n  const form = async (\n    options: Omit<FormModal, \"open\" | \"onCancel\" | \"type\" | \"onChange\">\n  ) => {\n    const handleConfirm = (formValue: string) => {\n      closeModal();\n      options.onConfirm(formValue);\n    };\n    setModalState({\n      ...options,\n      open: true,\n      onCancel: closeModal,\n      type: \"FORM\",\n      onConfirm: handleConfirm\n    });\n  };\n\n  return { confirm, modalState, form };\n};\n\nexport { useModal, ModalProvider };\n","import { useMutation } from \"@apollo/react-hooks\";\nimport {\n  Divider,\n  IconButton,\n  ListItem,\n  ListItemSecondaryAction,\n  ListItemText,\n  ListItemAvatar,\n  Avatar\n} from \"@material-ui/core\";\nimport { DeleteOutline, EditOutlined } from \"@material-ui/icons\";\nimport React from \"react\";\nimport {\n  DELETE_MESSAGE,\n  DELETE_MESSAGE_FROM_CACHE,\n  EDIT_MESSAGE\n} from \"../graphql/mutations\";\nimport {\n  DeleteMessageMutation,\n  DeleteMessageMutationVariables,\n  MessageListMessageFragment,\n  DeletedMessageFromCacheMutation,\n  DeletedMessageFromCacheMutationVariables,\n  EditMessageMutation,\n  EditMessageMutationVariables\n} from \"../typescript/codegen\";\nimport { useModal } from \"../contexts/ModalContext\";\n\ninterface Props {\n  message: MessageListMessageFragment;\n  isOwner: boolean;\n}\n\nconst Message: React.FC<Props> = ({ message, isOwner }) => {\n  const [deleteMessageFromServer] = useMutation<\n    DeleteMessageMutation,\n    DeleteMessageMutationVariables\n  >(DELETE_MESSAGE, { variables: { messageId: message.id } });\n  const [deleteMessageFromCache] = useMutation<\n    DeletedMessageFromCacheMutation,\n    DeletedMessageFromCacheMutationVariables\n  >(DELETE_MESSAGE_FROM_CACHE, { variables: { id: message.id } });\n  const [editMessageMutation] = useMutation<\n    EditMessageMutation,\n    EditMessageMutationVariables\n  >(EDIT_MESSAGE);\n\n  const { confirm, form } = useModal();\n\n  const deleteMessage = async () => {\n    if (\n      await confirm({\n        title: \"Delete Message?\",\n        description:\n          \"Deleting a message is permanent. Are you sure you want to do this?\"\n      })\n    ) {\n      const deleteMessageResult = await deleteMessageFromServer();\n      if (\n        deleteMessageResult.data &&\n        deleteMessageResult.data.deleteMessage.success\n      ) {\n        deleteMessageFromCache();\n      }\n    }\n  };\n\n  const editMessage = () => {\n    form({\n      title: \"Edit Message\",\n      initialValue: message.messageText,\n      onConfirm: formValue => {\n        editMessageMutation({\n          variables: {\n            messageId: message.id,\n            updatedText: formValue\n          }\n        });\n      }\n    });\n  };\n\n  return (\n    <>\n      <ListItem>\n        <ListItemAvatar>\n          <Avatar>{message.user.username[0].toUpperCase()}</Avatar>\n        </ListItemAvatar>\n        <ListItemText\n          primary={message.user.username}\n          secondary={message.messageText}\n        />\n        {isOwner && (\n          <>\n            <ListItemSecondaryAction>\n              <IconButton\n                color=\"primary\"\n                edge=\"end\"\n                aria-label=\"edit\"\n                onClick={editMessage}\n              >\n                <EditOutlined />\n              </IconButton>\n              <IconButton\n                color=\"primary\"\n                edge=\"end\"\n                aria-label=\"delete\"\n                onClick={deleteMessage}\n              >\n                <DeleteOutline />\n              </IconButton>\n            </ListItemSecondaryAction>\n          </>\n        )}\n      </ListItem>\n      <Divider />\n    </>\n  );\n};\n\nexport default Message;\n","import React, { useState, useEffect } from \"react\";\nimport {\n  Dialog,\n  DialogTitle,\n  DialogContent,\n  TextField,\n  DialogContentText,\n  DialogActions,\n  Button\n} from \"@material-ui/core\";\nimport { useModal } from \"../contexts/ModalContext\";\n\nconst Modal: React.FunctionComponent = () => {\n  const { modalState } = useModal();\n  const [formValue, setFormValue] = useState(\"\");\n\n  useEffect(() => {\n    if (modalState.type === \"FORM\") {\n      setFormValue(modalState.initialValue);\n    }\n  }, [modalState]);\n\n  return (\n    <Dialog open={modalState.open} onClose={modalState.onCancel}>\n      <DialogTitle>{modalState.title}</DialogTitle>\n      <DialogContent>\n        {modalState.type === \"CONFIRM\" ? (\n          <DialogContentText>{modalState.description}</DialogContentText>\n        ) : (\n          <TextField\n            autoFocus\n            fullWidth\n            value={formValue}\n            onChange={({ target }) => setFormValue(target.value)}\n            onKeyPress={({ key }) => {\n              if (key === \"Enter\") {\n                modalState.onConfirm(formValue);\n              }\n            }}\n          />\n        )}\n      </DialogContent>\n      <DialogActions>\n        <Button color=\"primary\" onClick={modalState.onCancel}>\n          Cancel\n        </Button>\n        <Button color=\"primary\" onClick={() => modalState.onConfirm(formValue)}>\n          Confirm\n        </Button>\n      </DialogActions>\n    </Dialog>\n  );\n};\n\nexport default Modal;\n","import { useQuery } from \"@apollo/react-hooks\";\nimport { LinearProgress } from \"@material-ui/core\";\nimport React from \"react\";\nimport { Redirect, Route, RouteProps, useLocation } from \"react-router-dom\";\nimport { IS_LOGGED_IN } from \"../graphql/queries\";\nimport { IsLoggedInQuery } from \"../typescript/codegen\";\n\nconst PrivateRoute: React.FC<RouteProps> = ({ children, ...rest }) => {\n  const location = useLocation();\n  const { data, loading } = useQuery<IsLoggedInQuery>(IS_LOGGED_IN);\n\n  if (loading) return <LinearProgress />;\n\n  return (\n    <Route {...rest}>\n      {data && data.isLoggedIn ? (\n        children\n      ) : (\n        <Redirect to={{ pathname: \"/auth\", state: { from: location } }} />\n      )}\n    </Route>\n  );\n};\n\nexport default PrivateRoute;\n","import gql from \"graphql-tag\";\n\nexport const SUBSCRIBE_TO_NEW_MESSAGES = gql`\n  subscription newMessages {\n    messageAdded {\n      id\n      messageText\n      user {\n        id\n        username\n        email\n        firstName\n        lastName\n      }\n    }\n  }\n`;\n\nexport const SUBSCRIBE_TO_DELETIONS = gql`\n  subscription deleteMessages {\n    messageDeleted\n  }\n`;\n\nexport const SUBSCRIBE_TO_EDITS = gql`\n  subscription editsToMessage {\n    messageEdited {\n      id\n      messageText\n    }\n  }\n`;\n","import { useQuery, useSubscription, useMutation } from \"@apollo/react-hooks\";\nimport {\n  createStyles,\n  IconButton,\n  InputAdornment,\n  LinearProgress,\n  List,\n  makeStyles,\n  Paper,\n  TextField,\n  Theme\n} from \"@material-ui/core\";\nimport { SendOutlined } from \"@material-ui/icons\";\nimport React, { useLayoutEffect, useRef, useState } from \"react\";\nimport { Message } from \"../components\";\nimport { ALL_MESSAGES, ME } from \"../graphql/queries\";\nimport {\n  SUBSCRIBE_TO_NEW_MESSAGES,\n  SUBSCRIBE_TO_DELETIONS,\n  SUBSCRIBE_TO_EDITS\n} from \"../graphql/subscriptions\";\nimport {\n  AllMessagesQuery,\n  NewMessagesSubscription,\n  SendMessageMutation,\n  SendMessageMutationVariables,\n  MeQuery,\n  DeletedMessageFromCacheMutation,\n  DeletedMessageFromCacheMutationVariables,\n  DeleteMessagesSubscription,\n  EditsToMessageSubscription,\n  EditMessageInCacheMutation,\n  EditMessageInCacheMutationVariables\n} from \"../typescript/codegen\";\nimport {\n  SEND_MESSAGE,\n  DELETE_MESSAGE_FROM_CACHE,\n  EDIT_MESSAGE_IN_CACHE\n} from \"../graphql/mutations\";\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {\n      maxHeight: \"100vh\",\n      overflowY: \"auto\",\n      position: \"relative\"\n    },\n    newMessageField: {\n      width: \"100%\"\n    },\n    newMessageContainer: {\n      position: \"sticky\",\n      bottom: 0\n    }\n  })\n);\n\nconst ChatRoom: React.FC = () => {\n  const { loading, data } = useQuery<AllMessagesQuery>(ALL_MESSAGES);\n  const { data: currentUser } = useQuery<MeQuery>(ME);\n  const classes = useStyles();\n  const messageEnd = useRef<HTMLDivElement>(null);\n  const [message, setMessage] = useState(\"\");\n  const [sendMessage, { loading: sendingMessage }] = useMutation<\n    SendMessageMutation,\n    SendMessageMutationVariables\n  >(SEND_MESSAGE, { variables: { messageText: message } });\n  const [deleteMessageFromCache] = useMutation<\n    DeletedMessageFromCacheMutation,\n    DeletedMessageFromCacheMutationVariables\n  >(DELETE_MESSAGE_FROM_CACHE);\n  const [editMessageInCache] = useMutation<\n    EditMessageInCacheMutation,\n    EditMessageInCacheMutationVariables\n  >(EDIT_MESSAGE_IN_CACHE);\n\n  useSubscription<NewMessagesSubscription>(SUBSCRIBE_TO_NEW_MESSAGES, {\n    onSubscriptionData: ({ subscriptionData, client }) => {\n      const allMessages = client.readQuery<AllMessagesQuery>({\n        query: ALL_MESSAGES\n      });\n      client.writeQuery({\n        query: ALL_MESSAGES,\n        data: {\n          allMessages: [\n            ...allMessages!.allMessages,\n            subscriptionData.data!.messageAdded\n          ]\n        }\n      });\n    }\n  });\n\n  useSubscription<DeleteMessagesSubscription>(SUBSCRIBE_TO_DELETIONS, {\n    onSubscriptionData: ({ subscriptionData }) => {\n      if (subscriptionData.data) {\n        deleteMessageFromCache({\n          variables: { id: subscriptionData.data.messageDeleted }\n        });\n      }\n    }\n  });\n\n  useSubscription<EditsToMessageSubscription>(SUBSCRIBE_TO_EDITS, {\n    onSubscriptionData: ({ subscriptionData }) => {\n      if (subscriptionData.data) {\n        editMessageInCache({\n          variables: {\n            id: subscriptionData.data.messageEdited.id,\n            text: subscriptionData.data.messageEdited.messageText\n          }\n        });\n      }\n    }\n  });\n\n  useLayoutEffect(() => {\n    if (messageEnd.current) messageEnd.current.scrollIntoView();\n  }, [data]);\n\n  if (loading) return <LinearProgress />;\n\n  return (\n    <Paper className={classes.root}>\n      <List>\n        {data &&\n          data.allMessages.map(m => (\n            <Message\n              key={m.id}\n              message={m}\n              isOwner={\n                (currentUser &&\n                  currentUser.me &&\n                  currentUser.me.username === m.user.username) ||\n                false\n              }\n            />\n          ))}\n        <div ref={messageEnd} />\n      </List>\n      <Paper className={classes.newMessageContainer}>\n        <TextField\n          label=\"Send a message\"\n          variant=\"filled\"\n          value={message}\n          onChange={({ target }) => {\n            setMessage(target.value);\n          }}\n          onKeyDown={({ key }) => {\n            if (key === \"Enter\") {\n              sendMessage();\n              setMessage(\"\");\n            }\n          }}\n          className={classes.newMessageField}\n          InputProps={{\n            endAdornment: (\n              <InputAdornment position=\"end\">\n                <IconButton\n                  color=\"primary\"\n                  disabled={sendingMessage}\n                  onClick={() => {\n                    sendMessage();\n                    setMessage(\"\");\n                  }}\n                >\n                  <SendOutlined />\n                </IconButton>\n              </InputAdornment>\n            )\n          }}\n        />\n      </Paper>\n    </Paper>\n  );\n};\n\nexport default ChatRoom;\n","import React, { useState } from \"react\";\n\nconst useSnackbar = () => {\n  const [message, setMessage] = useState(\"\");\n  const [open, setOpen] = useState(false);\n\n  const handleClose = (event: React.SyntheticEvent<any>, reason: string) => {\n    if (reason === \"clickaway\") {\n      return;\n    }\n\n    setOpen(false);\n    setMessage(\"\");\n  };\n\n  const openSnackbar = (textToDisplay: string) => {\n    setOpen(true);\n    setMessage(textToDisplay);\n  };\n\n  const snackbarProps = {\n    open,\n    message: <span id=\"message\">{message}</span>,\n    onClose: handleClose,\n    ContentProps: { \"aria-describedby\": \"message\" }\n  };\n\n  return { openSnackbar, snackbarProps };\n};\n\nexport default useSnackbar;\n","/* eslint-disable no-underscore-dangle */\nimport { useApolloClient, useMutation, useQuery } from \"@apollo/react-hooks\";\nimport {\n  Box,\n  Button,\n  ButtonGroup,\n  Card,\n  createStyles,\n  IconButton,\n  InputAdornment,\n  makeStyles,\n  Snackbar,\n  TextField,\n  Theme,\n  Typography,\n  LinearProgress\n} from \"@material-ui/core\";\nimport { VisibilityOffOutlined, VisibilityOutlined } from \"@material-ui/icons\";\nimport React, { useState } from \"react\";\nimport { Link, Redirect, Route, Switch, useHistory } from \"react-router-dom\";\nimport { CREATE_ACCOUNT, LOGIN } from \"../graphql/mutations\";\nimport { ME, IS_LOGGED_IN } from \"../graphql/queries\";\nimport { useSnackbar } from \"../hooks\";\nimport {\n  CreateAccountMutation,\n  CreateAccountMutationVariables,\n  LoginMutation,\n  LoginMutationVariables,\n  IsLoggedInQuery\n} from \"../typescript/codegen\";\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    form: {\n      display: \"flex\",\n      flexDirection: \"column\"\n    },\n    card: {\n      padding: theme.spacing(2),\n      flexGrow: 1\n    },\n    title: {\n      marginBottom: theme.spacing(2),\n      textAlign: \"center\"\n    },\n    textField: {\n      marginBottom: theme.spacing(1)\n    },\n    buttons: {\n      display: \"flex\",\n      justifyContent: \"center\"\n    }\n  })\n);\n\nconst Welcome: React.FC = () => {\n  const classes = useStyles();\n  return (\n    <Box display=\"flex\" flexDirection=\"column\" alignItems=\"center\">\n      <Typography variant=\"h2\" className={classes.title}>\n        Welcome!\n      </Typography>\n      <ButtonGroup variant=\"contained\" size=\"large\" color=\"primary\">\n        <Button component={Link} to=\"/auth/login\">\n          Login\n        </Button>\n        <Button component={Link} to=\"/auth/create-account\">\n          Create Account\n        </Button>\n      </ButtonGroup>\n    </Box>\n  );\n};\n\nconst CreateAccountForm: React.FC = () => {\n  const client = useApolloClient();\n  const history = useHistory();\n  const [createAccountFunc, { loading: creatingAccount }] = useMutation<\n    CreateAccountMutation,\n    CreateAccountMutationVariables\n  >(CREATE_ACCOUNT);\n  const [loginFunc, { loading: loggingIn }] = useMutation<\n    LoginMutation,\n    LoginMutationVariables\n  >(LOGIN);\n\n  const { openSnackbar, snackbarProps } = useSnackbar();\n  const [email, setEmail] = useState(\"\");\n  const [firstName, setFirstName] = useState(\"\");\n  const [lastName, setLastName] = useState(\"\");\n  const [username, setUsername] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const [showPassword, setShowPassword] = useState(false);\n  const classes = useStyles();\n\n  const handleAccountCreation = async (\n    event: React.FormEvent<HTMLFormElement>\n  ) => {\n    event.preventDefault();\n    const createAccountResult = await createAccountFunc({\n      variables: { email, username, password, firstName, lastName }\n    });\n\n    if (\n      createAccountResult.data &&\n      !createAccountResult.data.createUser.success\n    ) {\n      openSnackbar(\n        createAccountResult.data.createUser.message ||\n          \"There was a problem creating your account\"\n      );\n      return;\n    }\n\n    const loginResult = await loginFunc({\n      variables: { login: email, password }\n    });\n\n    if (loginResult.data && !loginResult.data.login.success) {\n      openSnackbar(\n        loginResult.data.login.message || \"There was a problem logging in.\"\n      );\n      return;\n    }\n\n    if (\n      createAccountResult.data &&\n      createAccountResult.data.createUser.success &&\n      createAccountResult.data.createUser.__typename === \"CreateUserResult\" &&\n      loginResult.data &&\n      loginResult.data.login.success &&\n      loginResult.data.login.__typename === \"LoginResult\" &&\n      loginResult.data.login.token\n    ) {\n      client.writeQuery({\n        query: ME,\n        data: { me: createAccountResult.data.createUser.user }\n      });\n      const { token } = loginResult.data.login;\n      localStorage.setItem(\"token\", token);\n      client.writeData({ data: { isLoggedIn: true } });\n      history.push(\"/\");\n    }\n  };\n\n  return (\n    <>\n      <Typography variant=\"h2\" className={classes.title}>\n        Create Account\n      </Typography>\n      <form onSubmit={handleAccountCreation} className={classes.form}>\n        <TextField\n          label=\"Username\"\n          id=\"user-username\"\n          value={username}\n          onChange={({ target }) => {\n            setUsername(target.value);\n          }}\n          autoComplete=\"username\"\n          variant=\"outlined\"\n          className={classes.textField}\n          required\n        />\n        <TextField\n          label=\"Email\"\n          id=\"user-email\"\n          value={email}\n          onChange={({ target }) => {\n            setEmail(target.value);\n          }}\n          autoComplete=\"email\"\n          variant=\"outlined\"\n          className={classes.textField}\n          required\n        />\n        <TextField\n          label=\"Password\"\n          id=\"user-password\"\n          value={password}\n          onChange={({ target }) => {\n            setPassword(target.value);\n          }}\n          autoComplete=\"new-password\"\n          variant=\"outlined\"\n          className={classes.textField}\n          type={showPassword ? \"text\" : \"password\"}\n          InputProps={{\n            endAdornment: (\n              <InputAdornment position=\"end\">\n                <IconButton\n                  edge=\"end\"\n                  aria-label=\"toggle password visibility\"\n                  onClick={() => setShowPassword(current => !current)}\n                  onMouseDown={event => {\n                    event.preventDefault();\n                  }}\n                >\n                  {showPassword ? (\n                    <VisibilityOffOutlined />\n                  ) : (\n                    <VisibilityOutlined />\n                  )}\n                </IconButton>\n              </InputAdornment>\n            )\n          }}\n          required\n        />\n        <TextField\n          label=\"First Name\"\n          id=\"user-firstName\"\n          value={firstName}\n          onChange={({ target }) => {\n            setFirstName(target.value);\n          }}\n          autoComplete=\"given-name\"\n          variant=\"outlined\"\n          className={classes.textField}\n        />\n\n        <TextField\n          label=\"Last Name\"\n          id=\"user-lastName\"\n          value={lastName}\n          onChange={({ target }) => {\n            setLastName(target.value);\n          }}\n          autoComplete=\"family-name\"\n          variant=\"outlined\"\n          className={classes.textField}\n        />\n        <Button\n          disabled={loggingIn || creatingAccount}\n          type=\"submit\"\n          color=\"primary\"\n          variant=\"contained\"\n        >\n          Create Account\n        </Button>\n      </form>\n      <Snackbar\n        {...snackbarProps}\n        anchorOrigin={{ vertical: \"bottom\", horizontal: \"right\" }}\n        autoHideDuration={6000}\n      />\n    </>\n  );\n};\n\nconst LoginForm: React.FC = () => {\n  const client = useApolloClient();\n  const history = useHistory();\n  const [loginFunc, { loading }] = useMutation<\n    LoginMutation,\n    LoginMutationVariables\n  >(LOGIN);\n  const { openSnackbar, snackbarProps } = useSnackbar();\n  const [login, setLogin] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const [showPassword, setShowPassword] = useState(false);\n  const classes = useStyles();\n\n  const handleLogin = async (event: React.FormEvent<HTMLFormElement>) => {\n    event.preventDefault();\n    const result = await loginFunc({ variables: { login, password } });\n\n    if (\n      result.data &&\n      result.data.login.success &&\n      result.data.login.__typename === \"LoginResult\" &&\n      result.data.login.token\n    ) {\n      const { token } = result.data.login;\n      localStorage.setItem(\"token\", token);\n      client.writeData({ data: { isLoggedIn: true } });\n      history.push(\"/\");\n    } else {\n      openSnackbar(\n        (result.data && result.data.login.message) ||\n          \"There was an issue logging in\"\n      );\n    }\n  };\n\n  return (\n    <>\n      <Typography variant=\"h2\" className={classes.title}>\n        Login\n      </Typography>\n      <form onSubmit={handleLogin} className={classes.form}>\n        <TextField\n          label=\"Login\"\n          id=\"user-login\"\n          placeholder=\"Username or email\"\n          value={login}\n          onChange={({ target }) => {\n            setLogin(target.value);\n          }}\n          autoComplete=\"email\"\n          variant=\"outlined\"\n          className={classes.textField}\n          required\n        />\n        <TextField\n          label=\"Password\"\n          id=\"user-password\"\n          value={password}\n          onChange={({ target }) => {\n            setPassword(target.value);\n          }}\n          autoComplete=\"current-password\"\n          variant=\"outlined\"\n          type={showPassword ? \"text\" : \"password\"}\n          className={classes.textField}\n          InputProps={{\n            endAdornment: (\n              <InputAdornment position=\"end\">\n                <IconButton\n                  edge=\"end\"\n                  aria-label=\"toggle password visibility\"\n                  onClick={() => setShowPassword(current => !current)}\n                  onMouseDown={event => {\n                    event.preventDefault();\n                  }}\n                >\n                  {showPassword ? (\n                    <VisibilityOffOutlined />\n                  ) : (\n                    <VisibilityOutlined />\n                  )}\n                </IconButton>\n              </InputAdornment>\n            )\n          }}\n          required\n        />\n\n        <Button\n          disabled={loading}\n          type=\"submit\"\n          color=\"primary\"\n          variant=\"contained\"\n        >\n          Login\n        </Button>\n      </form>\n      <Snackbar\n        {...snackbarProps}\n        anchorOrigin={{ vertical: \"bottom\", horizontal: \"right\" }}\n        autoHideDuration={6000}\n      />\n    </>\n  );\n};\n\nconst UserAuth: React.FC = () => {\n  const { data, loading } = useQuery<IsLoggedInQuery>(IS_LOGGED_IN);\n  const classes = useStyles();\n\n  if (loading) return <LinearProgress />;\n\n  if (data && data.isLoggedIn) {\n    return <Redirect to=\"/\" />;\n  }\n\n  return (\n    <Box\n      display=\"flex\"\n      alignItems=\"center\"\n      justifyContent=\"center\"\n      height=\"100vh\"\n    >\n      <Card className={classes.card}>\n        <Switch>\n          <Route exact path=\"/auth\">\n            <Welcome />\n          </Route>\n          <Route path=\"/auth/login\">\n            <LoginForm />\n          </Route>\n          <Route path=\"/auth/create-account\">\n            <CreateAccountForm />\n          </Route>\n        </Switch>\n      </Card>\n    </Box>\n  );\n};\n\nexport default UserAuth;\n","import React from \"react\";\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\nimport { PrivateRoute, Modal } from \"../components\";\nimport ChatRoom from \"./ChatRoom\";\nimport UserAuth from \"./UserAuth\";\n\nconst Pages: React.FC = () => (\n  <Router>\n    <Switch>\n      <Route path=\"/auth\">\n        <UserAuth />\n      </Route>\n      <PrivateRoute path=\"/\">\n        <ChatRoom />\n      </PrivateRoute>\n    </Switch>\n    <Modal />\n  </Router>\n);\n\nexport default Pages;\n","import { CssBaseline } from \"@material-ui/core\";\nimport React from \"react\";\nimport Pages from \"./pages\";\nimport { Layout } from \"./components\";\n\nconst App: React.FC = () => (\n  <>\n    <CssBaseline />\n    <Layout>\n      <Pages />\n    </Layout>\n  </>\n);\n\nexport default App;\n","/* eslint-disable no-console */\nimport { InMemoryCache } from \"apollo-cache-inmemory\";\nimport { ApolloClient } from \"apollo-client\";\nimport { ApolloLink, split } from \"apollo-link\";\nimport { setContext } from \"apollo-link-context\";\nimport { onError } from \"apollo-link-error\";\nimport { WebSocketLink } from \"apollo-link-ws\";\nimport { getMainDefinition } from \"apollo-utilities\";\nimport { createUploadLink } from \"apollo-upload-client\";\nimport gql from \"graphql-tag\";\nimport {\n  Resolvers,\n  AllMessagesQuery,\n  MessageQuery,\n  MessageQueryVariables\n} from \"./typescript/codegen\";\nimport { ALL_MESSAGES, MESSAGE } from \"./graphql/queries\";\n\nconst typeDefs = gql`\n  extend type Query {\n    isLoggedIn: Boolean!\n  }\n\n  extend type Mutation {\n    saveLogin(token: String!): String!\n    logout: String!\n    deleteMessageFromCache(id: ID!): String!\n    editMessageInCache(id: ID!, text: String!): String!\n  }\n`;\n\nconst resolvers: Resolvers<{ cache: InMemoryCache }> = {\n  Mutation: {\n    saveLogin: (root, { token }, { cache }) => {\n      localStorage.setItem(\"token\", token);\n      cache.writeData({ data: { isLoggedIn: true } });\n      return \"Logged in\";\n    },\n    logout: (root, args, { cache }) => {\n      localStorage.removeItem(\"token\");\n      return \"Logged out\";\n    },\n    deleteMessageFromCache: (root, args, { cache }) => {\n      const messages = cache.readQuery<AllMessagesQuery>({\n        query: ALL_MESSAGES\n      });\n      if (messages && messages.allMessages) {\n        const messagesWithoutDeletedMessage = messages.allMessages.filter(\n          m => m.id !== args.id\n        );\n        cache.writeQuery<AllMessagesQuery>({\n          query: ALL_MESSAGES,\n          data: { allMessages: messagesWithoutDeletedMessage }\n        });\n\n        return `Deleted message ${args.id}`;\n      }\n\n      return \"Error deleting message. Cache read query returned null\";\n    },\n    editMessageInCache: (root, args, { cache }) => {\n      const messageToEdit = cache.readQuery<\n        MessageQuery,\n        MessageQueryVariables\n      >({ query: MESSAGE, variables: { messageId: args.id } });\n      if (messageToEdit && messageToEdit.message) {\n        cache.writeQuery<MessageQuery, MessageQueryVariables>({\n          query: MESSAGE,\n          variables: { messageId: args.id },\n          data: {\n            message: { ...messageToEdit.message, messageText: args.text }\n          }\n        });\n        return \"Success\";\n      }\n      return \"Couldn't find message\";\n    }\n  }\n};\n\nconst cache = new InMemoryCache({\n  cacheRedirects: {\n    Query: {\n      message: (root, args, { getCacheKey }) =>\n        getCacheKey({ __typename: \"Message\", id: args.messageId })\n    }\n  }\n});\n\nconst uploadLink = createUploadLink({\n  uri: \"http://localhost:4000/graphql\"\n});\nconst wsLink = new WebSocketLink({\n  uri: \"ws://localhost:4000/graphql\",\n  options: {\n    timeout: 30000,\n    reconnect: true\n  }\n});\n\nconst errorHandler = onError(({ graphQLErrors, networkError }): void => {\n  if (graphQLErrors) {\n    graphQLErrors.forEach(({ message, locations, path }) => {\n      console.log(\n        `[GraphQL error]: Message: ${message}, Location: ${locations}, Path: ${path}`\n      );\n    });\n  }\n\n  if (networkError) {\n    console.log(`[Network error]: ${networkError}`);\n  }\n});\n\nconst authLink = setContext((operation, { headers }) => {\n  const token = localStorage.getItem(\"token\");\n  return {\n    headers: {\n      ...headers,\n      authorization: token ? `Bearer ${token}` : \"\"\n    }\n  };\n});\n\nconst link = ApolloLink.from([\n  errorHandler,\n  authLink.concat(\n    split(\n      ({ query }) => {\n        const definition = getMainDefinition(query);\n        return (\n          definition.kind === \"OperationDefinition\" &&\n          definition.operation === \"subscription\"\n        );\n      },\n      wsLink,\n      uploadLink\n    )\n  )\n]);\n\nconst client = new ApolloClient({ cache, link, typeDefs, resolvers });\n\ncache.writeData({\n  data: {\n    isLoggedIn: !!localStorage.getItem(\"token\")\n  }\n});\n\nexport default client;\n","import { ApolloProvider } from \"@apollo/react-hooks\";\nimport { createMuiTheme } from \"@material-ui/core\";\nimport { ThemeProvider } from \"@material-ui/core/styles\";\nimport React from \"react\";\nimport { render } from \"react-dom\";\nimport App from \"./App\";\nimport client from \"./client\";\nimport { ModalProvider } from \"./contexts/ModalContext\";\n\nconst Context: React.FC = ({ children }) => {\n  const theme = createMuiTheme();\n  return (\n    <ApolloProvider client={client}>\n      <ThemeProvider theme={theme}>\n        <ModalProvider>{children}</ModalProvider>\n      </ThemeProvider>\n    </ApolloProvider>\n  );\n};\n\nrender(\n  <Context>\n    <App />\n  </Context>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}